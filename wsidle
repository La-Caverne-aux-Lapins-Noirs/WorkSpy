#!/usr/bin/php
<?php
// Jason Brillante "Damdoshi"
// Pentacle Technologie 2008-2022
// Hanged Bunny Studio 2014-2021
// EFRITS SAS 2022
//
// WorkSpy
// This software serves two purpose:
//  - Telling which user is connected so it can be logged into the scholarship website
//  and do work stats
//  - Keeping internet unavailable for users doing an exam

// Un clef SSH doit déjà avoir été échangé.
function SendData($url, $data)
{
    $ship = hand_packet($data);
    $cmd = "cat $ship | ssh -o 'StrictHostKeyChecking no' infosphere_hand@$url -i /root/.ssh/ihk -p 4422 -tt infosphere_hand  2> /dev/null ; rm -f $ship";
    $ret = shell_exec($cmd);
    $ret = explode("\n", $ret);
    return (json_decode(end($ret), true));
}

// On ne peut pas effectuer une écriture de taille supérieure à 4k, donc
// on éclate tout. Le séparateur de commande devient tabulation verticale.
function hand_packet($data)
{
    $data = json_encode($data, JSON_UNESCAPED_UNICODE)."\v";
    $datatab = str_split($data, 2048);
    $datatab[] = "stop\v\n";
    $data = implode("\n", $datatab);
    $ship = "/tmp/.wsidle_msg".uniqid();
    file_put_contents($ship, "");
    system("chmod 600 $ship");
    file_put_contents($ship, $data);
    return ($ship);
}

function refresh_ip()
{
    $out = shell_exec("ip -o -4 addr list eno1 | tr -s ' ' | cut -d ' ' -f 4");
    $out = explode("/", $out)[0];
    return ($out);
}

function kill_user(int $target_id, string $target_name, array $kill_area)
{
    system("pkill -u $target_id");
    unset($kill_area[$target_name]);
    return(true);
}

function kill_unauthorized_sessions(array $user,
				    array $exam_stats,
				    array $user_pool,
				    string $mode_connexion,
				    array $room,
				    string $nfs_server)
{
    $has_killed_user = false;
    $username = $user[0].".".$user[1];

    if (count($user) == 3 && substr($user[2], 0, 4) == "exam")
    {        
        $exam_username = $username.".exam";
        $user = shell_exec("id -u ".$exam_username);

        // On tue les sessions exam hors examens
        // Par contre ça va shutdown les sessions juste après le ramassage de Infosphere_hand mdr
	
	if (!isset($exam_stats["users"][$username]))
	    {
		$has_killed_user = kill_user($user, $exam_username, $user_pool);
		SendData($nfs_server, ["command" => "addcustomlog",
				       "log" => "$exam_username has been killed, because ".
					      "there is no exam for now !"]);
	    }
	else if ($exam_stats["users"][$username] != $room["name"])
	    {
		$has_killed_user = kill_user($user, $exam_username, $user_pool);
		SendData($nfs_server, ["command" => "addcustomlog",
				       "log" => "$exam_username has been killed, because ".
					      "$exam_username is not in the right room"]);
	    }

        // On tue les sessions exam qui ne sont pas en présentiels
        if (strncmp($mode_connexion, "tty", 3) != 0)
	    {
		$has_killed_user = kill_user($user, $exam_username, $user_pool);
		SendData($nfs_server, ["command" => "addcustomlog",
				       "log" => "$exam_username has been killed, because ".
					      "exam cannot be in remote session"]);
	    }

        // On tue les sessions exam en double, 
        // Normalement il y le Xauthority qui n'est pas en lien symbolique
        // On regarde s'il l'utilisateur est déjà connecté et s'il ne l'est pas ailleurs
        if (isset($exam_stats["connected"][$exam_username])
	    && $exam_stats["connected"][$exam_username] != refresh_ip())
	{
            $has_killed_user = kill_user($user, $exam_username, $user_pool);
	    SendData($nfs_server, ["command" => "addcustomlog",
				   "log" => "$exam_username has been killed because".
					  " $exam_username is already connected somewhere else !"]);
	}
    } // On tue toutes les sessions non exam présentiel dans une salle d'examen
    else if ($room["exam_only"] && strncmp($mode_connexion, "tty", 3) == 0)
    {
	$has_killed_user = kill_user(shell_exec("id -u ".$username), $username, $user_pool);
	SendData($nfs_server, ["command" => "addcustomlog",
			       "log" => "$username has been killed because it's an exam only room"]);
    } // On tue les sessions non exam d'utilisateur en exam
    else if (isset($exam_stats["users"][$username]))
    {
        $has_killed_user = kill_user(shell_exec("id -u ".$username), $username, $user_pool);
	SendData($nfs_server, ["command" => "addcustomlog",
			       "log" => "$username has been killed because $username must be in exam"]);
    }
    return $has_killed_user;
}

function get_room(string $computer_name,
		  string $nfs_server)
{
    $ret = SendData($nfs_server, ["command" => "getcomputerroom", "name" => $computer_name]);
    if (isset($ret["result"]) && $ret["result"] == "ok")
	return $ret["message"];
    return "";
}

// Reset nftables

system("sudo nft flush ruleset; nft add table inet filter");

if ($argc < 2 || $argv[1] == "")
    $argv[1] = "nfs.efrits.fr";
if ($argc < 3 || $argv[2] == "")
    $argv[2] = "192.168.200.1";
if ($argc < 4 || $argv[3] == "")
    $argv[3] = "192.168.200.1";
if ($argc < 5 || $argv[4] == "")
    $argv[4] = "192.168.200.1";

$nfs_server = $argv[1];
$ip_nfs = $argv[2];
$ldap_server = $argv[3];
$net_server = $argv[4];

// Initialisation du packet pour la commande log
$packet["mac"] = trim(file_get_contents("/sys/class/net/eno1/address"));
$packet["name"] = trim(file_get_contents("/proc/sys/kernel/hostname"));
$packet["command"] = "log";
$packet["type"] = (substr(shell_exec("uname -m"), 0, 6) == "x86_64") ? 0 : 3; // 0: Linux, 3: RPI, (1: Windows, 2: Mac)

$EXAM = false;

// Récupération de la room
$computer_name = explode(".", $packet["name"])[0];
$room_info = ["name" => get_room($computer_name, $nfs_server), "exam_only" => false];

do
{
    // Récupération des élèves en examens
    $exam_stats = SendData($nfs_server, ["command" => "getexamstudents"]);
    
    $packet["ip"] = refresh_ip();
    $packet["users"] = explode("\n", trim(shell_exec("who | cut -d ' ' -f 1,2 | tr ' ' ';' | sort | uniq")));
    if (!isset($packet["users"]))
	continue;

    if (isset($exam_stats["users"]) && in_array($room_info["name"], $exam_stats["users"]))
	$room_info["exam_only"] = true;
    else
	$room_info["exam_only"] = false;

    // On parcoure les utilisateurs afin de trouver ceux en mode exam
    foreach ($packet["users"] as $usr)
    {
        $usr = explode(".", $usr);
	if (count($usr) == 1)
	    continue;
	$usr_part = explode(";", end($usr));
	$usr[count($usr) - 1] = $usr_part[0];
	$mode_connexion = $usr_part[1];
        
        if (kill_unauthorized_sessions($usr, $exam_stats, $packet["users"], $mode_connexion, $room_info, $nfs_server))
            continue;

	    // Leur compte est forcement prenom.nom.exam
        if (count($usr) == 3 && substr($usr[2], 0, 4) == "exam")
	{	    
            $usr = shell_exec("id -u ".$usr[0].".".$usr[1].".exam");

	    $usr = str_replace("\n", "", $usr);
	    
            // On regarde si l'utilisateur est déjà dans la liste pour rejet
            $out = shell_exec("nft list ruleset | grep $usr");
            if (strlen($out) == 0 || str_contains($out, $usr) === false)
            {
            // Ce n'est pas le cas, on doit donc l'ajouter
		system("nft add chain inet filter output {type filter hook output ".
		       "priority filter \; policy accept \; }");

                system("nft add rule inet filter output meta skuid $usr ".
                       "ip daddr $ip_nfs tcp dport 111 accept");
                system("nft add rule inet filter output meta skuid $usr ".
                       "ip daddr $ip_nfs tcp dport 2049 accept");
                system("nft add rule inet filter output meta skuid $usr ".
                       "ip daddr $ip_nfs udp dport 111 accept");
                system("nft add rule inet filter output meta skuid $usr ".
                       "ip daddr $ip_nfs udp dport 2049 accept");

		system("nft add rule inet filter output meta skuid $usr ".
		       "ip daddr $ldap_server tcp dport 636 accept");
		system("nft add rule inet filter output meta skuid $usr ".
		       "ip daddr $ldap_server tcp dport 3269 accept");
		system("nft add rule inet filter output meta skuid $usr ".
		       "ip daddr $ldap_server udp dport 636 accept");
		system("nft add rule inet filter output meta skuid $usr ".
		       "ip daddr $ldap_server udp dport 3269 accept");

		system("nft add rule inet filter output meta skuid $usr ".
		       "ip daddr $net_server tcp dport 1337 accept");
		system("nft add rule inet filter output meta skuid $usr ".
		       "ip daddr $net_server tcp dport 1337 accept");
            
            if (system("nft add rule inet filter output meta skuid $usr reject") === false)
                system("pkill -u $usr");
            }
        }
        $packet["date"] = trim(date("d/m/Y H:i:s", time()));
        $packet["lock"] = file_exists("/tmp/block") && strncmp($mode_connexion, "tty", 3) == 0;
        SendData($nfs_server, $packet);
        
    }
    system("sleep 5.0");
}
while (1);
exit(0);
