#!/usr/bin/php
<?php
// Jason Brillante "Damdoshi"
// Pentacle Technologie 2008-2022
// Hanged Bunny Studio 2014-2021
// EFRITS SAS 2022
//
// WorkSpy
// This software serves two purpose:
//  - Telling which user is connected so it can be logged into the scholarship website
//  and do work stats
//  - Keeping internet unavailable for users doing an exam

// Un clef SSH doit déjà avoir été échangé.
function SendData($url, $data)
{
    $ship = hand_packet($data);
    $cmd = "cat $ship | ssh -o 'StrictHostKeyChecking no' infosphere_hand@$url -i /root/.ssh/ihk -p 4422 -tt infosphere_hand  2> /dev/null ; rm -f $ship";
    $ret = shell_exec($cmd);
    return (json_decode($ret));
}

// On ne peut pas effectuer une écriture de taille supérieure à 4k, donc
// on éclate tout. Le séparateur de commande devient tabulation verticale.
function hand_packet($data)
{
    $data = json_encode($data, JSON_UNESCAPED_UNICODE)."\v";
    $datatab = str_split($data, 2048);
    $datatab[] = "stop\v\n";
    $data = implode("\n", $datatab);
    $ship = "/tmp/.wsidle_msg".uniqid();
    file_put_contents($ship, "");
    system("chmod 600 $ship");
    file_put_contents($ship, $data);
    return ($ship);
}

function refresh_ip()
{
    $out = shell_exec("ip -o -4 addr list eno1 | tr -s ' ' | cut -d ' ' -f 4");
    $out = explode("/", $out)[0];
    return ($out);
}

if ($argc < 2 || $argv[1] == "")
    $argv[1] = "nfs.efrits.fr";
if ($argc < 3 || $argv[2] == "")
    $argv[2] = "intra.efrits.fr";
if ($argc < 4 || $argv[3] == "")
    $argv[3] = "192.168.200.1";
if ($argc < 5 || $argv[4] == "")
    $argv[4] = "192.168.200.1";

$nfs_server = $argv[1];
$is_server = $argv[2];
$ldap_server = $argv[3];
$net_server = $argv[4];
	
$packet["mac"] = trim(file_get_contents("/sys/class/net/eno1/address"));
$packet["name"] = trim(file_get_contents("/proc/sys/kernel/hostname"));
$packet["command"] = "log";
$packet["type"] = (shell_exec("uname -m") == "x86_64") ? 0 : 3; // 0: Linux, 3: RPI, (1: Windows, 2: Mac)

$EXAM = false;

do
{
    $packet["ip"] = refresh_ip();
    $packet["users"] = explode("\n", trim(shell_exec("who | cut -d ' ' -f 1,2 | tr ' ' ';' | sort | uniq")));
    
    // On vérifie si la chaine EXAM existe
    $EXAM = shell_exec("iptables -L EXAM 2> /dev/null");
    if ($EXAM == "")
    {
	system("iptables -N EXAM");
	// On accepte NFS
	system("iptables -A EXAM -p tcp -d $nfs_server --dport 111 -j ACCEPT");
	system("iptables -A EXAM -p tcp -d $nfs_server --dport 2049 -j ACCEPT");
	system("iptables -A EXAM -p udp -d $nfs_server --dport 111 -j ACCEPT");
	system("iptables -A EXAM -p udp -d $nfs_server --dport 2049 -j ACCEPT");
	// On accepte LDAP
	system("iptables -A EXAM -p tcp -d $ldap_server --dport 636 -j ACCEPT");
	system("iptables -A EXAM -p tcp -d $ldap_server --dport 3269 -j ACCEPT");
	system("iptables -A EXAM -p udp -d $ldap_server --dport 636 -j ACCEPT");
	system("iptables -A EXAM -p udp -d $ldap_server --dport 3269 -j ACCEPT");
	// On accepte le port spécial
	system("iptables -A EXAM -p tcp -d $net_server --dport 1337 -j ACCEPT");
	system("iptables -A EXAM -p udp -d $net_server --dport 1337 -j ACCEPT");
    }
    // Il n'y a personne et EXAM existe
    if (count($packet["users"]) == 0 && $EXAM)
	system("iptables -F EXAM && iptables -X EXAM");
    
    // On parcoure les utilisateurs afin de trouver ceux en mode exam
    foreach ($packet["users"] as $usr)
    {
        $usr = explode(".", $usr);
	// Leur compte est forcement prenom.nom.exam
        if (count($usr) == 3 && substr($usr[2], 0, 4) == "exam")
	{
	    $usr = $usr[0].$usr[1].".exam";
	    // On regarde si l'utilisateur est déjà dans la liste pour rejet
	    $out = shell_exec("iptables -L EXAM | grep $usr");
	    if (strstr($out, $usr) === false)
	    {
		// Ce n'est pas le cas, on doit donc l'ajouter
		if (!(system("iptables -A EXAM -m owner --uid-owner $usr -p all -j REJECT") === 0))
		    // Si tout ne s'est pas bien passé, on déconnecte l'utilisateur
		    system("skill -kill -u $usr");
	    }
	}
    }
    $packet["date"] = trim(date("d/m/Y H:i:s", time()));
    $packet["lock"] = file_exists("/tmp/block");
    SendData($nfs_server, $packet);
    system("sleep 5.0");
}
while (1);
exit(0);
